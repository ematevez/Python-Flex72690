"""
Actividad Integrada: Herencia y Manejo de Datos en AppCoder
Objetivos
Aplicar el concepto de herencia múltiple en Django con templates.
Configurar y completar templates personalizados para el proyecto AppCoder.
Utilizar el panel de administración de Django para manejar datos de los modelos.
Implementar un API Form para la interacción con la base de datos.
Repasar y resolver dudas sobre los temas trabajados.
Parte 1: Herencia y Personalización de Templates


Consigna
Crear o completar los templates siguientes:
entregables.html
estudiantes.html
profesores.html
Configurar cada uno para que herede de un template base llamado base.html.
Incluir al menos una sección personalizada en cada template:
Ejemplo: Una lista de entregables, un formulario de registro de estudiantes o un resumen de profesores.
Ejemplo Base
"""
===============================================================================
base.html:
===============================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}AppCoder{% endblock %}</title>
</head>
<body>
    <header>
        <h1>Bienvenidos a AppCoder</h1>
        <nav>
            <a href="{% url 'entregables' %}">Entregables</a> |
            <a href="{% url 'estudiantes' %}">Estudiantes</a> |
            <a href="{% url 'profesores' %}">Profesores</a>
        </nav>
    </header>
    <main>
        {% block content %}{% endblock %}
    </main>
    <footer>
        <p>© 2025 - AppCoder</p>
    </footer>
</body>
</html>

# ===============================================================================
# entregables.html:
# ===============================================================================

{% extends 'base.html' %}

{% block title %}Entregables{% endblock %}

{% block content %}
<h2>Listado de Entregables</h2>
<ul>
    <li>Entrega 1: Proyecto Inicial</li>
    <li>Entrega 2: API Form</li>
    <li>Entrega 3: Finalización del Proyecto</li>
</ul>
{% endblock %}

# Realiza algo similar para los otros dos templates (estudiantes.html y profesores.html).

# Parte 2: Agregar Datos desde el Panel de Administración


# Consigna
# Crear un superusuario en el proyecto:

# python manage.py createsuperuser
# Acceder al panel de administración en http://127.0.0.1:8000/admin/.
# Agregar datos en dos modelos distintos.

# Ejemplo: Añadir un estudiante y un profesor.
# Verificar que los datos se hayan guardado correctamente.
# Ejemplo en Vivo
# Clase: Estudiante
# Campos: nombre, apellido, email
# Clase: Profesor
# Campos: nombre, apellido, materia
# En el panel de administración, usa la opción "Add" para ambos modelos.

# Parte 3: Agregar Datos con un API Form


# Consigna
# Crear un API Form en Django para insertar datos en la base de datos:
# Ejemplo: Un formulario para agregar nuevos estudiantes.

# Verificar que los datos se hayan guardado correctamente.
# Ejemplo de Formulario

===============================================================================
Modelo Estudiante:
===============================================================================
class Estudiante(models.Model):
    nombre = models.CharField(max_length=50)
    apellido = models.CharField(max_length=50)
    email = models.EmailField()

    def __str__(self):
        return f"{self.nombre} {self.apellido}"

===============================================================================
Formulario:
===============================================================================
from django import forms
from .models import Estudiante

class EstudianteForm(forms.ModelForm):
    class Meta:
        model = Estudiante
        fields = ['nombre', 'apellido', 'email']
        
        
===============================================================================
Vista para manejar el formulario:
===============================================================================
from django.shortcuts import render
from .forms import EstudianteForm

def agregar_estudiante(request):
    if request.method == 'POST':
        form = EstudianteForm(request.POST)
        if form.is_valid():
            form.save()
            return render(request, 'confirmacion.html')
    else:
        form = EstudianteForm()
    return render(request, 'agregar_estudiante.html', {'form': form})


===============================================================================
Template agregar_estudiante.html:
===============================================================================
{% extends 'base.html' %}

{% block content %}
<h2>Agregar Nuevo Estudiante</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Guardar</button>
</form>
{% endblock %}


Parte 4: Cierre y Consultas


# Realiza un resumen rápido de los puntos clave:
# Herencia en templates.
# Gestión de datos con el panel de administración.
# Uso de un API Form.
# Abre un espacio para preguntas y aclaraciones.

=============================================================================================

===============================buscador para index.html======================================
 <div class="container mt-5">
        <p class="text-center">Utiliza el buscador para encontrar estudiantes o profesores.</p>
    
        <!-- Cuadro de búsqueda -->
        <form method="get" action="{% url 'buscar' %}" class="my-4">
            <div class="input-group">
                <input type="text" name="q" class="form-control" placeholder="Buscar por nombre, apellido o email..." value="{{ query|default:'' }}">
                <button class="btn btn-primary" type="submit">Buscar</button>
            </div>
        </form>
    
        <!-- Tabla de resultados -->
        {% if resultados %}
            <table class="table table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>Nombre</th>
                        <th>Apellido</th>
                        <th>Email</th>
                        <th>Tipo</th>
                    </tr>
                </thead>
                <tbody>
                    {% for resultado in resultados %}
                        <tr>
                            <td>{{ resultado.nombre }}</td>
                            <td>{{ resultado.apellido }}</td>
                            <td>{{ resultado.email }}</td>
                            <td>
                                {% if resultado.profesion %}
                                    Profesor
                                {% else %}
                                    Estudiante
                                {% endif %}
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        {% else %}
            <p class="text-center">No se encontraron resultados.</p>
        {% endif %}
    </div>

====================================================================================
=============================BUSQUEDA para views.py=================================
def buscar(request):
    query = request.GET.get('q', '')
    resultados = []

    if query:
        estudiantes = Estudiante.objects.filter(
            Q(nombre__icontains=query) | Q(apellido__icontains=query) | Q(email__icontains=query)
        )
        profesores = Profesor.objects.filter(
            Q(nombre__icontains=query) | Q(apellido__icontains=query) | Q(email__icontains=query) | Q(profesion__icontains=query) | Q(direccion__icontains=query)
        )

        for estudiante in estudiantes:
            resultados.append({
                'tipo': 'Estudiante',
                'nombre': estudiante.nombre,
                'apellido': estudiante.apellido,
                'email': estudiante.email,
                'extra': '-',
            })

        for profesor in profesores:
            resultados.append({
                'tipo': 'Profesor',
                'nombre': profesor.nombre,
                'apellido': profesor.apellido,
                'email': profesor.email,
                'extra': f'{profesor.profesion} / {profesor.direccion}',
            })

    return render(request, 'AppCoder/index.html', {'resultados': resultados})


====================================================================================
=============================estudiante_list con herencia===========================

    {% extends "AppCoder/index.html" %}

{% block titulo %}
    Lista de Estudiantes
{% endblock %}

{% block cuerpo %}
<div class="container mt-5">
    <h1 class="text-center">Lista de Estudiantes</h1>
    <ul class="list-group">
        {% for estudiante in estudiantes %}
        <li class="list-group-item">
            {{ estudiante.nombre }} {{ estudiante.apellido }} - {{ estudiante.email }}
        </li>
        {% endfor %}
    </ul>
    <a href="{% url 'cargar_estudiante' %}" class="btn btn-primary mt-3">Agregar Estudiante</a>
</div>
{% endblock %}

====================================================================================
=============================agregar urls.py para busqueda==========================

path('buscar/', views.buscar, name='buscar'),


====================================================================================
=============================agregar modelos al admin de django=====================

from django.contrib import admin
from .models import *



admin.site.register(Estudiante)
admin.site.register(Profesor)
