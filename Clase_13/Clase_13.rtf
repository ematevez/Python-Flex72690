{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang3082{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset1 Segoe UI Symbol;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs22\lang10 PASO 1 REGISTRO Y EDICION DE USUARIOS\b0\par
#================================REGISTRO================\par
en views.py\par
from django.contrib.auth.forms import UserCreationForm\par
from django.contrib import messages\par
def register(request):\par
    if request.method == 'POST':\par
        form = UserCreationForm(request.POST)\par
        if form.is_valid():\par
            form.save()\par
            messages.success(request, 'Usuario creado exitosamente. \'a1Ahora puedes iniciar sesi\'f3n!')\par
            return redirect('login')\par
    else:\par
        form = UserCreationForm()\par
    return render(request, 'AppCoder/register.html', \{'form': form\})\par
#=========================================================\par
register.html\par
\par
\{% extends "AppCoder/index.html" %\}\par
\par
\{% block titulo %\}Registro\{% endblock %\}\par
\par
\{% block cuerpo %\}\par
<div class="d-flex justify-content-center align-items-center vh-100">\par
    <div class="card shadow p-4 rounded" style="width: 30rem; background-color: #f8f9fa;">\par
        <h1 class="text-center mb-4">Registrar Usuario</h1>\par
        <form method="post">\par
            \{% csrf_token %\}\par
            \{\{ form.as_p \}\}\par
            <div class="text-center">\par
                <button type="submit" class="btn btn-primary">Registrar</button>\par
            </div>\par
        </form>\par
    </div>\par
</div>\par
\{% endblock %\}\par
#=======================================================\par
urls.py agregar register en la importacion .views\par
 path('register/', register, name='register'),\par
\par
#=======================================================\par
en login.html\par
\par
 <a href="\{% url 'register' %\}"><p>\'bfNo tienes cuenta? Reg\'edstrate.</p></a>\par
\par
==========================REGISTER MEJORADO===============================\par
\{% extends "AppCoder/index.html" %\}\par
\par
\{% block titulo %\}Registro de Usuario\{% endblock %\}\par
\par
\{% block cuerpo %\}\par
<div class="d-flex justify-content-center align-items-center vh-100">\par
    <div class="card shadow-lg p-4 rounded" style="width: 28rem; background-color: #ffffff;">\par
        <h2 class="text-center mb-4 text-primary">Crear Cuenta</h2>\par
        <form method="post" novalidate>\par
            \{% csrf_token %\}\par
            <div class="mb-3">\par
                <label for="id_username" class="form-label">Nombre de Usuario</label>\par
                <input type="text" name="username" class="form-control" id="id_username" placeholder="Ingrese su nombre de usuario">\par
            </div>\par
            <div class="mb-3">\par
                <label for="id_password1" class="form-label">Contrase\'f1a</label>\par
                <input type="password" name="password1" class="form-control" id="id_password1" placeholder="Ingrese una contrase\'f1a segura">\par
            </div>\par
            <div class="mb-3">\par
                <label for="id_password2" class="form-label">Confirmar Contrase\'f1a</label>\par
                <input type="password" name="password2" class="form-control" id="id_password2" placeholder="Confirme su contrase\'f1a">\par
            </div>\par
            <div class="text-center mt-4">\par
                <button type="submit" class="btn btn-primary w-100">Registrar</button>\par
            </div>\par
        </form>\par
        <hr class="my-4">\par
        <div class="text-center">\par
            <p class="mb-0">\'bfYa tienes una cuenta? <a href="\{% url 'login' %\}" class="text-primary">Inicia Sesi\'f3n</a></p>\par
        </div>\par
    </div>\par
</div>\par
\{% endblock %\}\par
\b PASO 2 EDITAR USUARIO\b0\par
=========================EDITAR PERFIL====================================\par
editarPerfil.html\par
\par
\{% extends "AppCoder/index.html" %\}\par
\par
\{% block titulo %\}Editar Perfil\{% endblock %\}\par
\par
\{% block cuerpo %\}\par
<div class="d-flex justify-content-center align-items-center vh-100">\par
    <div class="card shadow-lg p-4 rounded" style="width: 28rem; background-color: #ffffff;">\par
        <h2 class="text-center mb-4 text-primary">Editar Perfil</h2>\par
        <form method="post" novalidate>\par
            \{% csrf_token %\}\par
            \{\{ miFormulario.as_p \}\}\par
            <div class="text-center mt-4">\par
                <button type="submit" class="btn btn-success w-100">Guardar Cambios</button>\par
            </div>\par
        </form>\par
        <hr class="my-4">\par
        <div class="text-center">\par
            <a href="\{% url 'index' %\}" class="btn btn-secondary w-100">Cancelar</a>\par
        </div>\par
    </div>\par
</div>\par
\{% endblock%\}\par
\par
===================FORMS======================================\par
en forms.py\par
from django.contrib.auth.forms import UserChangeForm\par
from django.contrib.auth.models import User\par
\par
class UserEditForm(UserChangeForm):\par
    password1 = forms.CharField(label='Nueva contrase\'f1a', widget=forms.PasswordInput, required=False)\par
    password2 = forms.CharField(label='Confirmar contrase\'f1a', widget=forms.PasswordInput, required=False)\par
\par
    class Meta:\par
        model = User\par
        fields = ['email', 'first_name', 'last_name']\par
\par
    def clean_password2(self):\par
        password1 = self.cleaned_data.get('password1')\par
        password2 = self.cleaned_data.get('password2')\par
\par
        if password1 and password1 != password2:\par
            raise forms.ValidationError("Las contrase\'f1as no coinciden.")\par
        return password2\par
=========================VISTA=================================\par
en views.py\par
\par
@login_required\par
def editarPerfil(request):\par
    usuario = request.user\par
\par
    if request.method == 'POST':\par
        miFormulario = UserEditForm(request.POST, instance=usuario)  # Relaciona el formulario con el usuario actual\par
        if miFormulario.is_valid():\par
            informacion = miFormulario.cleaned_data\par
            \par
            # Actualiza los datos del usuario\par
            usuario.email = informacion['email']\par
            usuario.first_name = informacion['first_name']\par
            usuario.last_name = informacion['last_name']\par
            \par
            if informacion.get('password1') and informacion['password1'] == informacion['password2']:\par
                usuario.set_password(informacion['password1'])  # Cambia la contrase\'f1a correctamente\par
            \par
            usuario.save()\par
\par
            messages.success(request, 'Perfil actualizado correctamente.')\par
            return redirect('index')  # Cambia el render por redirect para evitar reposteo\par
\par
    else:\par
        miFormulario = UserEditForm(instance=usuario)\par
\par
    return render(request, "AppCoder/editarPerfil.html", \{"miFormulario": miFormulario, "usuario": usuario\})\par
\par
=============================URLS========================\par
 path('editarperfil/', editarPerfil, name='editarperfil'),\par
\par
\b PASO 3 AVATAR\par
\b0 =====================AVATAR==================================\par
1. Configurar el Modelo de Perfil\par
Crea un modelo de perfil que incluya el campo de avatar. models.py\par
\par
from django.contrib.auth.models import User\par
\par
class Profile(models.Model):\par
    user = models.OneToOneField(User, on_delete=models.CASCADE)\par
    avatar = models.ImageField(upload_to='avatars/', default='avatars/default.png')\par
\par
    def __str__(self):\par
        return f"Perfil de \{self.user.username\}"\par
\par
2. Registrar el Modelo en el Administrador admin.py\par
from .models import Profile\par
\par
@admin.register(Profile)\par
class ProfileAdmin(admin.ModelAdmin):\par
    list_display = ['user', 'avatar']\par
\par
3. Modificar el Formulario de Registro\par
Agrega l\'f3gica al formulario de registro para que se cree un perfil autom\'e1ticamente. forms.py\par
from django.contrib.auth.forms import UserCreationForm\par
from .models import Profile\par
\par
class UserRegisterForm(UserCreationForm):\par
    email = forms.EmailField(required=True)\par
\par
    class Meta:\par
        model = User\par
        fields = ['username', 'email', 'password1', 'password2']\par
\par
    def save(self, commit=True):\par
        user = super().save(commit=False)\par
        if commit:\par
            user.save()\par
            # Crear el perfil al registrar un usuario\par
            Profile.objects.create(user=user)\par
        return user\par
4. Agregar la Edici\'f3n de Perfil\par
Permite a los usuarios editar su avatar desde la p\'e1gina de edici\'f3n de perfil. forms.py\par
A\'f1ade un formulario para editar el avatar:\par
\par
class ProfileEditForm(forms.ModelForm):\par
    class Meta:\par
        model = Profile\par
        fields = ['avatar']\par
\par
5. Actualizar la Vista de Edici\'f3n de Perfil\par
Modifica la vista para manejar la edici\'f3n del avatar: views.py\par
from .forms import UserEditForm, ProfileEditForm\par
\par
@login_required\par
def editarPerfil(request):\par
    usuario = request.user\par
    try:\par
        perfil = usuario.profile\par
    except Profile.DoesNotExist:\par
        perfil = Profile.objects.create(user=usuario)\par
\par
    if request.method == 'POST':\par
        user_form = UserEditForm(request.POST, instance=usuario)\par
        profile_form = ProfileEditForm(request.POST, request.FILES, instance=perfil)\par
\par
        if user_form.is_valid() and profile_form.is_valid():\par
            user_form.save()\par
            profile_form.save()\par
            messages.success(request, 'Perfil actualizado correctamente.')\par
            return redirect('index')\par
    else:\par
        user_form = UserEditForm(instance=usuario)\par
        profile_form = ProfileEditForm(instance=perfil)\par
\par
    return render(request, "AppCoder/editarPerfil.html", \{\par
        "user_form": user_form,\par
        "profile_form": profile_form,\par
        "usuario": usuario\par
    \})\par
6. Crear o Editar el Template de Edici\'f3n\par
Archivo: templates/AppCoder/editarPerfil.html\par
\{% extends "AppCoder/index.html" %\}\par
\par
\{% block titulo %\}Editar Perfil\{% endblock %\}\par
\par
\{% block cuerpo %\}\par
<div class="d-flex justify-content-center align-items-center vh-100">\par
    <div class="card shadow-lg p-4 rounded" style="width: 30rem;">\par
        <h2 class="text-center mb-4">Editar Perfil</h2>\par
        <form method="post" enctype="multipart/form-data">\par
            \{% csrf_token %\}\par
            \{\{ user_form.as_p \}\}\par
            \{\{ profile_form.as_p \}\}\par
            <div class="text-center mt-4">\par
                <button type="submit" class="btn btn-success w-100">Guardar Cambios</button>\par
            </div>\par
        </form>\par
        <hr class="my-4">\par
        <div class="text-center">\par
            <a href="\{% url 'index' %\}" class="btn btn-secondary w-100">Cancelar</a>\par
        </div>\par
    </div>\par
</div>\par
\{% endblock %\}\par
\par
7. Mostrar el Avatar en el Navbar\par
Actualiza el navbar para mostrar el avatar.\par
                \{% if user.is_authenticated %\}\par
                    <li class="nav-item">\par
                        <img src="\{\{ user.profile.avatar.url \}\}" alt="Avatar" class="rounded-circle" width="40" height="40">\par
                    </li>\par
8. Configurar los Archivos Multimedia settings.py\par
MEDIA_URL = '/media/'\par
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\par
\par
Archivo: urls.py\par
from django.conf import settings\par
from django.conf.urls.static import static\par
\par
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\par
\par
=====================================\par
        <li class="nav-item">\par
                        <img src="\{\{ user.profile.avatar.url|default:"/media/avatars/1.png" \}\}" \par
                             alt="Avatar" \par
                             class="rounded-circle" \par
                             width="40" \par
                             height="40">\par
             </li>\par
            \par
===================SERVIDOR===============================\par
Paso 1: Crea una cuenta en PythonAnywhere\par
Si a\'fan no tienes una cuenta, ve a PythonAnywhere y reg\'edstrate.\par
Paso 2: Prepara tu proyecto Django\par
Antes de subir tu proyecto a PythonAnywhere, aseg\'farate de que est\'e9 listo para producci\'f3n:\par
\par
Revisa la configuraci\'f3n en settings.py:\par
\par
ALLOWED_HOSTS: Aseg\'farate de que est\'e9 configurado correctamente. Por ejemplo:\par
ALLOWED_HOSTS = ['your-username.pythonanywhere.com']\par
DEBUG: Debes establecer DEBUG = False en producci\'f3n.\par
\par
Configuraci\'f3n de archivos est\'e1ticos:\par
STATIC_ROOT = os.path.join(BASE_DIR, 'static')\par
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\par
\par
Recuerda las dependencias:\par
Crea un archivo requirements.txt en tu proyecto si no lo tienes:\par
pip freeze > requirements.txt\par
\par
Paso 3: Subir tu proyecto a PythonAnywhere\par
Sube tu proyecto a PythonAnywhere:\par
Si prefieres usar Git, puedes clonar tu repositorio directamente desde GitHub o Bitbucket:\par
git clone {{\field{\*\fldinst{HYPERLINK https://github.com/tuusuario/tu-repo.git }}{\fldrslt{https://github.com/tuusuario/tu-repo.git\ul0\cf0}}}}\f0\fs22\par
\par
Configura el WSGI:\par
\par
En PythonAnywhere, ve a la secci\'f3n "Web" en el panel de control.\par
All\'ed ver\'e1s una opci\'f3n para "Add a new web app". Selecciona "Django" y sigue las instrucciones.\par
En el campo "WSGI configuration file", encontrar\'e1s un enlace al archivo wsgi.py. Haz clic en \'e9l para editarlo.\par
Dentro de ese archivo, modifica la configuraci\'f3n para apuntar a tu aplicaci\'f3n Django. Aseg\'farate de que est\'e9 como:\par
\par
import os\par
import sys\par
\par
path = '/home/your-username/myproject'  # Ruta donde est\'e1 tu proyecto\par
if path not in sys.path:\par
    sys.path.append(path)\par
\par
os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'\par
\par
from django.core.wsgi import get_wsgi_application\par
application = get_wsgi_application()\par
\par
Configura los archivos est\'e1ticos y multimedia:\par
\par
PythonAnywhere tiene un directorio predeterminado para archivos est\'e1ticos y multimedia.\par
En la secci\'f3n "Web" de PythonAnywhere, agrega las rutas de los archivos est\'e1ticos y de medios:\par
En "Static files", pon:\par
/static/   -> /home/your-username/myproject/static/\par
/media/    -> /home/your-username/myproject/media/\par
\par
Configura las bases de datos:\par
Si usas SQLite, PythonAnywhere usar\'e1 una base de datos local, pero si usas MySQL, ve a la pesta\'f1a "Databases" en PythonAnywhere y configura la base de datos.\par
\par
Paso 6: Ejecutar migraciones y recoger archivos est\'e1ticos\par
Ejecuta las migraciones:\par
En la consola de PythonAnywhere, activa tu entorno virtual y navega a la carpeta de tu proyecto:\par
\par
python manage.py migrate\par
Recoge los archivos est\'e1ticos:\par
En la consola, ejecuta el siguiente comando para recolectar los archivos est\'e1ticos:\par
python manage.py collectstatic\par
\par
Paso 7: Probar y verificar\par
Accede a tu aplicaci\'f3n:\par
\par
Ve a la secci\'f3n "Web" en PythonAnywhere y accede a la URL proporcionada (por ejemplo: your-username.pythonanywhere.com).\par
Deber\'edas ver tu aplicaci\'f3n Django en vivo.\par
Revisar logs:\par
\par
Si encuentras errores, revisa los logs en la secci\'f3n "Web" en PythonAnywhere para obtener m\'e1s detalles sobre lo que puede estar fallando.\par
Paso 8: Mantenimiento y actualizaciones\par
Cada vez que hagas cambios en tu c\'f3digo, puedes volver a hacer git pull (si usas Git) o cargar los archivos modificados nuevamente.\par
Recuerda ejecutar python manage.py migrate si agregas nuevas migraciones.\par
\par
===================TEST======================================\par
Paso 1: Configurar las pruebas\par
Django proporciona una estructura b\'e1sica para las pruebas. Aseg\'farate de tener la siguiente estructura dentro de tu aplicaci\'f3n Django:\par
myproject/\par
    \f1\u9500?\u9472?\u9472?\f0  myapp/\par
        \f1\u9500?\u9472?\u9472?\f0  models.py\par
        \f1\u9500?\u9472?\u9472?\f0  views.py\par
        \f1\u9500?\u9472?\u9472?\f0  forms.py\par
        \f1\u9500?\u9472?\u9472?\f0  tests/\par
            \f1\u9500?\u9472?\u9472?\f0  __init__.py\par
            \f1\u9500?\u9472?\u9472?\f0  test_models.py\par
            \f1\u9500?\u9472?\u9472?\f0  test_views.py\par
            \f1\u9500?\u9472?\u9472?\f0  test_forms.py\par
Paso 2: Pruebas de modelos (test_models.py)\par
Las pruebas de modelos verifican la correcta funcionalidad de las clases del modelo, m\'e9todos o campos personalizados que puedas haber agregado.\par
\par
Ejemplo:\par
\par
from django.test import TestCase\par
from myapp.models import MyModel\par
\par
class MyModelTest(TestCase):\par
\par
    def test_string_representation(self):\par
        # Verifica si el m\'e9todo __str__() devuelve el valor correcto\par
        instance = MyModel(name="Test Model")\par
        self.assertEqual(str(instance), "Test Model")\par
\par
    def test_model_creation(self):\par
        # Verifica la creaci\'f3n del modelo con campos\par
        instance = MyModel.objects.create(name="Test Model", description="Test Description")\par
        self.assertEqual(instance.name, "Test Model")\par
        self.assertEqual(instance.description, "Test Description")\par
\par
    def test_field_max_length(self):\par
        # Verifica la longitud m\'e1xima de un campo\par
        field = MyModel._meta.get_field('name')\par
        self.assertEqual(field.max_length, 255)\par
Paso 3: Pruebas de vistas (test_views.py)\par
Las pruebas de vistas verifican que las vistas devuelvan la respuesta correcta y que los permisos de acceso sean los adecuados.\par
\par
Ejemplo de prueba para una vista que muestra un listado de objetos:\par
from django.test import TestCase\par
from django.urls import reverse\par
from myapp.models import MyModel\par
\par
class MyModelViewTest(TestCase):\par
\par
    @classmethod\par
    def setUpTestData(cls):\par
        # Crea una instancia del modelo para las pruebas\par
        MyModel.objects.create(name="Test Model", description="Test Description")\par
\par
    def test_view_status_code(self):\par
        # Verifica si la vista devuelve un c\'f3digo de estado 200 (OK)\par
        response = self.client.get(reverse('myapp:model_list'))\par
        self.assertEqual(response.status_code, 200)\par
\par
    def test_view_template(self):\par
        # Verifica si la vista utiliza la plantilla correcta\par
        response = self.client.get(reverse('myapp:model_list'))\par
        self.assertTemplateUsed(response, 'myapp/model_list.html')\par
\par
    def test_model_data_in_view(self):\par
        # Verifica si los datos del modelo est\'e1n presentes en la respuesta\par
        response = self.client.get(reverse('myapp:model_list'))\par
        self.assertContains(response, "Test Model")\par
        self.assertContains(response, "Test Description")\par
Paso 4: Pruebas de formularios (test_forms.py)\par
Las pruebas de formularios verifican que los formularios devuelvan los resultados esperados y manejen correctamente los datos.\par
\par
Ejemplo de prueba para un formulario de creaci\'f3n de MyModel:\par
\par
from django.test import TestCase\par
from myapp.forms import MyModelForm\par
from myapp.models import MyModel\par
\par
class MyModelFormTest(TestCase):\par
\par
    def test_valid_form(self):\par
        # Verifica que un formulario v\'e1lido sea guardado correctamente\par
        form_data = \{'name': 'Valid Name', 'description': 'Valid Description'\}\par
        form = MyModelForm(data=form_data)\par
        self.assertTrue(form.is_valid())\par
\par
    def test_invalid_form(self):\par
        # Verifica que el formulario sea inv\'e1lido si falta un campo\par
        form_data = \{'name': '', 'description': 'Invalid Description'\}\par
        form = MyModelForm(data=form_data)\par
        self.assertFalse(form.is_valid())\par
\par
    def test_model_creation_from_form(self):\par
        # Verifica que los datos se guarden en el modelo despu\'e9s de un env\'edo de formulario v\'e1lido\par
        form_data = \{'name': 'Form Created Model', 'description': 'Created via form'\}\par
        form = MyModelForm(data=form_data)\par
        if form.is_valid():\par
            form.save()\par
        instance = MyModel.objects.get(name='Form Created Model')\par
        self.assertEqual(instance.description, 'Created via form')\par
Paso 5: Pruebas de autenticaci\'f3n (test_auth.py)\par
Si tu aplicaci\'f3n tiene autenticaci\'f3n de usuarios, puedes probar el inicio de sesi\'f3n, registro y permisos.\par
\par
Ejemplo de prueba para iniciar sesi\'f3n:\par
\par
from django.test import TestCase\par
from django.contrib.auth.models import User\par
from django.urls import reverse\par
\par
class UserAuthTest(TestCase):\par
\par
    def test_login(self):\par
        # Crea un usuario de prueba\par
        user = User.objects.create_user(username='testuser', password='testpassword')\par
\par
        # Verifica si el login es exitoso\par
        response = self.client.post(reverse('login'), \{'username': 'testuser', 'password': 'testpassword'\})\par
        self.assertEqual(response.status_code, 200)\par
        self.assertContains(response, 'Welcome')\par
\par
    def test_login_invalid_user(self):\par
        # Verifica que un usuario inv\'e1lido no pueda iniciar sesi\'f3n\par
        response = self.client.post(reverse('login'), \{'username': 'wronguser', 'password': 'wrongpassword'\})\par
        self.assertEqual(response.status_code, 200)\par
        self.assertContains(response, 'Invalid credentials')\par
Paso 6: Ejecutar las pruebas\par
Para ejecutar las pruebas, simplemente usa el siguiente comando:\par
\par
python manage.py test\par
Esto ejecutar\'e1 todas las pruebas que hayas definido en tus archivos de prueba y te mostrar\'e1 el resultado de cada una de ellas.\par
\par
Resumen\par
Modelos: Verifica la creaci\'f3n de instancias y sus m\'e9todos.\par
Vistas: Verifica los c\'f3digos de estado HTTP, las plantillas y la presencia de datos en las respuestas.\par
Formularios: Verifica la validez de los formularios y la correcta creaci\'f3n de objetos a partir de ellos.\par
Autenticaci\'f3n: Verifica el inicio de sesi\'f3n y el manejo de credenciales.\par
\par
==========================\par
Video 5 min\par
Readme explicando el trabajo y como usarlo - link del video y/o pagina\par
3 aplicaciones\par
3 modelos\par
4 links \par
Ruta about_me/\par
NavBar      \par
Home\par
About\par
Pages\par
Login\par
Signup\par
Messages\par
Profile\par
Logout\par
Get pages\par
Get page\par
Create page\par
Update Page\par
Delete page\par
Get profile\par
Update profile\par
\par
}
 